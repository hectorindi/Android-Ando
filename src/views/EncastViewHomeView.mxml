<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		title="Encast" xmlns:player="com.player.*"
		creationComplete="view1_creationCompleteHandler(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import com.AS.Main;
			import AS.MainSD;
			
			import views.ReadQrCodeSample;
			
			private var _orientation:String = "";
			private var testQR:ReadQrCodeSample;
			
			private var resX:Number;
			private var resY:Number;
			
			private static var _screenClass:Class;
			private var fullScreen:Boolean;
			private static var checkedForScreenClass:Boolean;
			private var beforeFullScreenInfo:Object;
			private var main:Main;
			
			
			//SD application parameter and variables
			
			private var _orientationSD:String = "";
			private var testQRSD:ReadQrCodeSample;
			
			private var resXSD:Number;
			private var resYSD:Number;
			
			private static var _screenClassSD:Class;
			private var fullScreenSD:Boolean;
			private static var checkedForScreenClassSD:Boolean;
			private var beforeFullScreenInfoSD:Object;
			private var mainSD:MainSD;
			private var isHD:Boolean = true;
			
			
			
			// CONVERTING PPT USING FLASH CS% AND EXPORTING AS SWF. 
			
			protected function view1_creationCompleteHandler(event:FlexEvent):void
			{
				loaderingContVertical.visible = true;
				loaderingContVertical.includeInLayout = true;
				resX = Capabilities.screenResolutionX;
				resY = Capabilities.screenResolutionY;		
				var thisScreen:Screen = Screen.mainScreen;
				trace("Width : "+thisScreen.visibleBounds.width+" height : "+thisScreen.visibleBounds.height);
				var newScaleX:Number = thisScreen.visibleBounds.width / 1019 * 0.98;
				var newScaleY:Number = thisScreen.visibleBounds.height / 680 * 0.98;
				var newScale:Number = Math.min(newScaleX,newScaleY,1);
				//currentState = "CompleteHori";
				
				/*if(resX > 600)
				{
				this.addEventListener(Event.ADDED_TO_STAGE,onAddedToStage );
				}
				else
				{
				this.addEventListener(Event.ADDED_TO_STAGE,onAddedToStageSD);
				}*/			
				this.addEventListener(Event.ADDED_TO_STAGE,onAddedToStage );
			}
			
			
			private function onAddedToStage( event:Event ):void 
			{
				//stage.setOrientation(StageOrientation.ROTATED_RIGHT);
				innerhori.visible = false;
				innerhori.includeInLayout = false;
				queryContainerHori.visible = false;
				queryContainerHori.includeInLayout = false;
				loaderingContVertical.visible = true;
				loaderingContVertical.includeInLayout = true;
				//testQR = new ReadQrCodeSample(StartGrp,onCompleteQRcode);
				onCompleteQRcode("http://www.wstream.net/testing/new");
				_orientation = stage.orientation;
				resX = Capabilities.screenResolutionX;
				resY = Capabilities.screenResolutionY;
			}
			
			private function onCompleteQRcode(data:String):void
			{
				//testQR.destroy();
				//testQR = null;
				stage.orientation; 
				_orientation = stage.deviceOrientation; 
				this.stage.setOrientation( StageOrientation.ROTATED_RIGHT );
				if(true)
				{
					//currentState = "CompleteHori";	
					//main = new Main(CompleteHoriGrp,data,showAll,player, new Label(),slideShow);					
					//currentState = "CompleteHori";
					slideShow.initSlides(main.pptName,main.SlideArray.length);
					if(true)
					{
						//currentState = "CompleteHori";							
						player.scaleX = 1;
						player.scaleY = 1;
						
						main.setPPTHori();
						if(isHD == true)
						{						
							//videoContainerVert.width = 500;
							//videoContainerVert.height = 400;
							
							player.width = 500;
							player.height = 500;
							
							main.setPPTHori();
							
							//slideContainerVert.width = 500;
							//slideContainerVert.height = 400;
						}
					}
				}
				
				
			}
			
			private function showAll(data:String):void
			{
				_orientation = stage.orientation;
				if(true)
				{
					innerhori.visible = true;
					innerhori.includeInLayout = true;
					queryContainerHori.visible = true;
					queryContainerHori.includeInLayout = true;
					loaderingContVertical.visible = false;
					loaderingContVertical.includeInLayout = false;
					//currentState = "CompleteHori";	
					//player.playVideo();
				}
			}
			
			private function onAddedToStageVert(e:Event):void
			{
				//
			}
			
			protected function player_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				/*videoPod.addChild(player);
				player.source = "assets/test.mp4";
				player.y = -80;*/
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<!--<video:FLVPlayback id="player" skin="MinimaSilverAll.swf"/>-->
	</fx:Declarations>
	
		<fx:Style>
		@namespace player "com.player.*";
		@namespace s "library://ns.adobe.com/flex/spark";
		
		.test {
			fontSize: 20px;
			color: #9933FF;
		}
		
		.textIP {
			height : 100px;
		}
	</fx:Style>
	
	<s:Group id="CompleteHoriGrp" width="100%" height="100%" minWidth="{Capabilities.screenResolutionY}" minHeight="{Capabilities.screenResolutionX}">
		<s:Group width="100%" name="inner" id="innerhori" visible="false">
			<s:layout>
				<s:HorizontalLayout id="horiLoayout" paddingLeft="-5" paddingTop="10" horizontalAlign="center" verticalAlign="middle"/>
			</s:layout>
			<s:BorderContainer id="vidContanerHori" height="100%" name="player" borderColor="red" borderVisible="true" backgroundAlpha="0.0" minWidth="510" minHeight="400" addedToStage="onAddedToStageVert(event)">
				<s:layout>
					<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
				</s:layout>
				<player:CustomPlayerLocal id="player" name="skinplayer" width="740" height="390"/>
			</s:BorderContainer>
			<s:BorderContainer id="slideContainerHori" height="100%" name="slide" borderColor="White" borderVisible="true" backgroundAlpha="0.0" minWidth="500" minHeight="400">
				<s:layout>
					<s:VerticalLayout horizontalAlign="left" verticalAlign="middle"/>
				</s:layout>
			</s:BorderContainer>
		</s:Group>
		<s:BorderContainer id="queryContainerHori" name="slide" left="10" visible="false" borderWeight="2" height="170" minWidth="1010" borderVisible="false" borderColor="red" width="95%" backgroundAlpha="0.0" y="535">
			<s:layout>
				<s:VerticalLayout id="queryContainerHoriLayout" horizontalAlign="center" verticalAlign="middle" paddingTop="2" paddingBottom="2" paddingLeft="-5"/>
				<!--<s:VerticalLayout id="queryContainerHoriLayout" horizontalAlign="center" verticalAlign="middle" paddingTop="10" paddingBottom="5" paddingLeft="30"/>-->
			</s:layout>
			<player:SlideShow id="slideShow" width="100%" visible="true"/>
		</s:BorderContainer>
	</s:Group>
	<s:BorderContainer id="loaderingContVertical" name="load" borderColor="red" minWidth="510" minHeight="400" borderVisible="true" height="100%" width="100%" backgroundAlpha="0.0">
		<s:layout>
			<s:VerticalLayout horizontalAlign="center" verticalAlign="middle" paddingLeft="0" paddingTop="100"/>
		</s:layout>
		<s:SWFLoader source="@Embed(source='assets/loading.gif')"/>
		<s:Label text="Loading Presentetion, Please wait ..."/>
	</s:BorderContainer>
</s:View>
